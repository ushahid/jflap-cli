/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.usmanshahid.jflapcli;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;
import java.io.Serializable;
import java.nio.BufferOverflowException;

import com.usmanshahid.jflapcli.grammar.GrammarTester;
import com.usmanshahid.jflapcli.utils.IO;

import edu.duke.cs.jflap.automata.Automaton;
import edu.duke.cs.jflap.automata.SimulatorFactory;
import edu.duke.cs.jflap.automata.AutomatonSimulator;
import edu.duke.cs.jflap.grammar.UnboundGrammar;
import edu.duke.cs.jflap.grammar.parse.BruteParser;

import java.lang.IllegalArgumentException;



@Command(name = "jflapcli", subcommands = { RunOnce.class, CommandLine.HelpCommand.class }, description = "JFLAP cli utility")
public class JflapCli {
    public static void main(String[] args) {
        int exitCode = new CommandLine(new JflapCli()).execute(args); 
        System.exit(exitCode);
    }
}



@Command(name = "runonce", description = "Test a single string on automata") 
class RunOnce implements Runnable {
    @Parameters(paramLabel = "FILEPATH", description = "JFLAP file to load")
    private String filepath;

    @Parameters(paramLabel="STRING", description="String to test", defaultValue="")
    private String input;

    @Override
    public void run() {
        Serializable jflapObj = IO.loadJflapFile(this.filepath);
        if(jflapObj instanceof edu.duke.cs.jflap.automata.fsa.FiniteStateAutomaton ||
            jflapObj instanceof edu.duke.cs.jflap.automata.pda.PushdownAutomaton ||
            jflapObj instanceof edu.duke.cs.jflap.automata.turing.TuringMachine ||
            jflapObj instanceof edu.duke.cs.jflap.automata.mealy.MooreMachine ||
            jflapObj instanceof edu.duke.cs.jflap.automata.mealy.MealyMachine) {

            Automaton automaton = (Automaton) jflapObj;
            AutomatonSimulator sim = SimulatorFactory.getSimulator(automaton);
            if (sim == null) {
                throw new RuntimeException("Cannot load an automaton simulator for " + automaton.getClass());
            }
            boolean accept = sim.simulateInput(input);
            System.out.println(accept);
        } else if (jflapObj instanceof edu.duke.cs.jflap.regular.RegularExpression){
            System.out.println("regex");
        } else if (jflapObj instanceof edu.duke.cs.jflap.grammar.UnboundGrammar) {
            UnboundGrammar g = (UnboundGrammar) jflapObj;
            // try {
            //     BruteParser parser = BruteParser.get(g, this.input);
            //     parser.start();
            //     while(!parser.isFinished());
            //     System.out.println(parser.getAnswer() != null);
            // } catch (IllegalArgumentException ex){
            //     System.out.println(false);
            // }
            GrammarTester tester = new GrammarTester(g);
            System.out.println(tester.canGenerate(input));

        } else {
            throw new RuntimeException("Cannot handle JFLAP object of type " + jflapObj.getClass());
        }
    }
}
